services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "5000:8080"
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Database: Host=postgres;Port=5432;Database=ore_dev;Username=postgres;Password=postgres
      ConnectionStrings__Redis: redis:6379
      Jwt__Issuer: Ore.Dev
      Jwt__Audience: Ore.Dev
      Jwt__Key: ZGV2a2V5LXN1cGVyLXNlY3JldC1zaG91bGQtYmUtMzItYnl0ZXM=
      OpenAi__ApiKey: replace-with-openai-key
      OpenAi__Model: gpt-4.1
      Minio__Endpoint: minio:9000
      Minio__AccessKey: minioadmin
      Minio__SecretKey: minioadmin
      Minio__BucketName: ore-media
      Minio__UseSsl: "false"
    depends_on:
      api-migrator:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    restart: unless-stopped
    environment:
      ConnectionStrings__Database: Host=postgres;Port=5432;Database=ore_dev;Username=postgres;Password=postgres
      ConnectionStrings__Redis: redis:6379
      Jwt__Issuer: Ore.Dev
      Jwt__Audience: Ore.Dev
      Jwt__Key: ZGV2a2V5LXN1cGVyLXNlY3JldC1zaG91bGQtYmUtMzItYnl0ZXM=
      OpenAi__ApiKey: replace-with-openai-key
      OpenAi__Model: gpt-4.1
      Minio__Endpoint: minio:9000
      Minio__AccessKey: minioadmin
      Minio__SecretKey: minioadmin
      Minio__BucketName: ore-media
      Minio__UseSsl: "false"
    depends_on:
      api-migrator:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: http://localhost:5000
    ports:
      - "5173:80"
    restart: unless-stopped
    depends_on:
      - api

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ore_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >-
      /bin/sh -c "
      until mc alias set ore http://minio:9000 minioadmin minioadmin; do sleep 1; done;
      mc mb -p ore/ore-media || true;
      exit 0;
      "
    restart: "no"

  api-migrator:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: build
    working_dir: /src
    command: /bin/sh -c "dotnet tool restore && dotnet ef database update --project src/Infrastructure/Ore.Infrastructure.csproj --startup-project src/Api/Ore.Api.csproj"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Database: Host=postgres;Port=5432;Database=ore_dev;Username=postgres;Password=postgres
      ConnectionStrings__Redis: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

volumes:
  postgres-data:
  minio-data:
