using System;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Ore.Application.Abstractions.Llm;
using Ore.Application.Common.Models;
using Ore.Domain.ValueObjects;
using Ore.Infrastructure.Options;

namespace Ore.Infrastructure.Services.Llm;

public sealed class OpenAiLlmService : ILlmService
{
    private readonly OpenAiOptions _options;
    private readonly ILogger<OpenAiLlmService> _logger;

    public OpenAiLlmService(IOptions<OpenAiOptions> options, ILogger<OpenAiLlmService> logger)
    {
        _options = options.Value;
        _logger = logger;
    }

    public Task<GeneratedContentResult> GenerateContentAsync(Guid teamId, BrandVoiceProfile? voiceProfile, string prompt, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            return Task.FromResult(new GeneratedContentResult(string.Empty, Array.Empty<string>(), string.Empty, string.Empty));
        }

        if (string.IsNullOrWhiteSpace(_options.ApiKey))
        {
            _logger.LogWarning("OpenAI API key is not configured. Returning synthesized response.");
        }

        var builder = new StringBuilder();
        builder.AppendLine($"Prompt: {prompt.Trim()}");

        if (voiceProfile is not null)
        {
            builder.AppendLine();
            builder.AppendLine("Voice Guidelines:");
            builder.AppendLine($"- Voice: {voiceProfile.Voice}");
            builder.AppendLine($"- Tone: {voiceProfile.Tone}");
            builder.AppendLine($"- Audience: {voiceProfile.Audience}");

            if (voiceProfile.Keywords.Any())
            {
                builder.AppendLine($"- Keywords: {string.Join(", ", voiceProfile.Keywords)}");
            }
        }

        builder.AppendLine();
        builder.AppendLine($"Generated by: {_options.Model}");
        builder.AppendLine($"TeamId: {teamId}");

        var caption = $"[{_options.Model}] {prompt.Trim()}";
        var hashtags = voiceProfile?.Keywords.Any() == true
            ? voiceProfile.Keywords.Select(k => $"#{k.Replace(' ', '_').ToLowerInvariant()}").ToArray()
            : new[] { "#brandstory", "#marketingmagic", "#contentbuilder" };
        var imageIdea = voiceProfile is not null
            ? $"Imagery that reflects {voiceProfile.Tone} tone and resonates with {voiceProfile.Audience}."
            : "Clean, modern visual that aligns with the requested platform.";

        var rawText = builder.ToString();

        return Task.FromResult(new GeneratedContentResult(caption, hashtags, imageIdea, rawText));
    }
}
