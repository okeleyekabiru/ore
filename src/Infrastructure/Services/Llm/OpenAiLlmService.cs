using System;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Ore.Application.Abstractions.Llm;
using Ore.Domain.ValueObjects;
using Ore.Infrastructure.Options;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace Ore.Infrastructure.Services.Llm;

public sealed class OpenAiLlmService : ILlmService
{
    private readonly OpenAiOptions _options;
    private readonly ILogger<OpenAiLlmService> _logger;

    public OpenAiLlmService(IOptions<OpenAiOptions> options, ILogger<OpenAiLlmService> logger)
    {
        _options = options.Value;
        _logger = logger;
    }

    public Task<string> GeneratePostAsync(Guid teamId, BrandVoiceProfile? voiceProfile, string prompt, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            return Task.FromResult(string.Empty);
        }

        if (string.IsNullOrWhiteSpace(_options.ApiKey))
        {
            _logger.LogWarning("OpenAI API key is not configured. Returning synthesized response.");
        }

        var builder = new StringBuilder();
        builder.AppendLine($"Prompt: {prompt.Trim()}");

        if (voiceProfile is not null)
        {
            builder.AppendLine();
            builder.AppendLine("Voice Guidelines:");
            builder.AppendLine($"- Voice: {voiceProfile.Voice}");
            builder.AppendLine($"- Tone: {voiceProfile.Tone}");
            builder.AppendLine($"- Audience: {voiceProfile.Audience}");

            if (voiceProfile.Keywords.Any())
            {
                builder.AppendLine($"- Keywords: {string.Join(", ", voiceProfile.Keywords)}");
            }
        }

        builder.AppendLine();
        builder.AppendLine($"Generated by: {_options.Model}");
        builder.AppendLine($"TeamId: {teamId}");

        return Task.FromResult(builder.ToString());
    }
}
